"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
import logging
from io import TextIOWrapper
# import sentry_sdk
import socket
from pathlib import Path
from environs import Env

# Logger
logger = logging.getLogger(__file__)

# Sentry
# sentry_sdk.init(
#     dsn="https://examplePublicKey@o0.ingest.sentry.io/0",
#     integrations=[
#        DjangoIntegration(
#           transaction_style='url',
#           middleware_spans=True,
#           signals_spans=False,
#           cache_spans=False,
#        ),
#     ],
#     # Set traces_sample_rate to 1.0 to capture 100%
#     # of transactions for performance monitoring.
#     # We recommend adjusting this value in production,
#     traces_sample_rate=1.0,
# )

# Environment settings
env = Env()
env.read_env()

# Get version of the app
with open(os.path.join(os.getcwd(), "VERSION.txt"),
          encoding="utf-8") as v_file:
    APP_VERSION_NUMBER: TextIOWrapper = v_file.read()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DJANGO_DEBUG')
ALLOWED_HOSTS = ["*"]

if DEBUG:
    # Django-debug-toolbar params
    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[:-1] + "1" for ip in ips]

LOCALS = [
    'utils',
    'cart.apps.CartConfig',
    'orders.apps.OrdersConfig',
    'payment.apps.PaymentConfig',
    'shop.apps.ShopConfig',
    'coupons.apps.CouponsConfig',
    'users.apps.UsersConfig',
    'django.contrib.admindocs',
    'news.apps.NewsConfig',
]

TESTS = [
    'debug_toolbar',
    'django_extensions',
]

THIRD_PART = [
    'taggit',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'django.contrib.postgres',
    'django_celery_results',
    # 'cookie_consent',
    "django_bootstrap5",
    'fontawesomefree',
    'crispy_forms',
    'embed_video',
    'redisboard',
    'tinymce',
]

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# Application definition
INSTALLED_APPS = DJANGO_APPS + THIRD_PART + LOCALS

if DEBUG:
    INSTALLED_APPS += TESTS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.admindocs.middleware.XViewMiddleware',
]

if DEBUG:
    MIDDLEWARE += [
        'debug_toolbar.middleware.DebugToolbarMiddleware',
    ]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'utils.context_processor.get_version',
                'cart.context_processors.cart',
            ],
        },
    },
]

CRISPY_TEMPLATE_PACK = 'bootstrap5'
ASGI_APPLICATION = 'config.asgi.application'
WSGI_APPLICATION = 'config.wsgi.application'


CACHE_MIDDLEWARE_ALIAS = 'default'
CACHE_MIDDLEWARE_SECONDS = 60 * 15  # 15 minutes
CACHE_MIDDLEWARE_KEY_PREFIX = 'lmlevents'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
DATABASES = {
    'default': env.dj_db_url('DJANGO_DB',
                             default=env.dj_db_url('DJANGO_DB_DEFAULT')),
}

# Auto generate UML and database.
GRAPH_MODELS = {
  'all_applications': True,
  'group_models': True,
}

REDIS_HOST = env('REDIS_HOST')
REDIS_PORT = env('REDIS_PORT')
REDIS_DB = env('REDIS_DB')
# APPEND_SLASH = False

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://redis:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        },
        "KEY_PREFIX": "lml_events"
    }
}

# Cache time to live is 15 minutes.
CACHE_TTL = 60 * 15

# SESSION
SITE_ID = 1
CART_SESSION_ID = 'cart'

# COOKIES

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation'
        '.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation'
        '.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation'
        '.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation'
        '.NumericPasswordValidator',
    },
]

# REDIRECT
LOGIN_URL = 'users:sign-in'
LOGIN_REDIRECT_URL = 'shop:shop'
LOGOUT_REDIRECT_URL = 'users:sign-in'

# Twilio
TWILIO_SID = env('TWILIO_SID')
TWILIO_TOKEN = env('TWILIO_TOKEN')
TWILIIO_TEL = env('TWILIIO_TEL')
TWILIO_VERIFY = env('TWILIO_VERIFY')
IND = "+33"

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/
LANGUAGE_CODE = 'fr-fr'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Media storage
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Email server configuration
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = env('EMAIL_HOST')
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')
EMAIL_PORT = env.int('EMAIL_PORT')
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS')
DISPLAY_NAME = "LML Events verification mail"
DONOT_REPLY_EMAIL_PASSWORD = ""
CURRENT_SITE = "http://localhost:8000"

# Stripe settings
STRIPE_PUBLISHABLE_KEY = env('STRIPE_PUB')     # Stripe's publishable key
STRIPE_SECRET_KEY = env('STRIPE_KEY')          # Stripe's secret key
STRIPE_API_VERSION = env('STRIPE_VERSION')     # Stripe version
STRIPE_WEBHOOK_SECRET = env('STRIPE_WEBHOOK')  # Stripe's webhook key

# RabbitMQ
CELERY_BROKER_URL = env('BROKER_URL')

# Logs
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'root': {
        'level': 'INFO',
        'handlers': ['file']
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '/var/log/django.log',
            'formatter': 'app',
        },
    },
    'loggers': {
        'django': {
            # 'catch all' loggers by referencing it with the empty string
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
    },
    'formatters': {
        'app': {
            'format': (
                '%(asctime)s [%(levelname)-8s] '
                '(%(module)s.%(funcName)s) %(message)s'
            ),
            'datefmt': '%d-%m-%Y %H:%M:%S',
        },
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
